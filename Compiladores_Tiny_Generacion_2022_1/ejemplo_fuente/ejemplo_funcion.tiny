{Ejemplo de funciones con variables locales y globales}

// Variables globales compartidas entre funciones y programa principal
global contador_global;
global resultado_global;
global vector_global : array[5];

// Programa principal
begin
    var numero_local;
    var suma_local;
    var indice;
    
    // Inicialización de variables globales
    contador_global := 0;
    resultado_global := 0;
    
    // Inicializar vector global
    for indice := 0 to 4 step 1
        vector_global[indice] := indice + 1
    end;
    
    // Ejemplo 1: Función simple que usa variables globales
    write 100; // Indicador de ejemplo 1
    numero_local := 5;
    suma_local := call incrementar_contador(numero_local);
    write suma_local;
    write contador_global; // Debería mostrar el valor modificado
    
    // Ejemplo 2: Función que modifica vector global
    write 200; // Indicador de ejemplo 2
    call modificar_vector_global(10);
    for indice := 0 to 4 step 1
        write vector_global[indice]
    end;
    
    // Ejemplo 3: Función con parámetros y variables locales
    write 300; // Indicador de ejemplo 3
    numero_local := 8;
    suma_local := call calcular_factorial(numero_local);
    write suma_local;
    
    // Ejemplo 4: Función que utiliza otra función
    write 400; // Indicador de ejemplo 4
    suma_local := call suma_factorial_rango(3, 5);
    write suma_local;
    
    // Ejemplo 5: Función que trabaja con vectores como parámetros
    write 500; // Indicador de ejemplo 5
    suma_local := call sumar_elementos_vector(vector_global, 5);
    write suma_local;
    
    // Ejemplo 6: Función recursiva simple
    write 600; // Indicador de ejemplo 6
    numero_local := 4;
    suma_local := call potencia_recursiva(2, numero_local);
    write suma_local;
    
    // Mostrar estado final de variables globales
    write 999;
    write contador_global;
    write resultado_global
end

// Función 1: Incrementa contador global y retorna suma
function incrementar_contador(valor)
begin
    var temp_local;
    contador_global := contador_global + 1;
    temp_local := contador_global + valor;
    resultado_global := temp_local;
    return temp_local
end

// Función 2: Modifica el vector global sumando un valor
function modificar_vector_global(valor_agregar)
begin
    var i;
    for i := 0 to 4 step 1
        vector_global[i] := vector_global[i] + valor_agregar
    end;
    contador_global := contador_global + 1;
    return 0
end

// Función 3: Calcula factorial usando variables locales
function calcular_factorial(n)
begin
    var factorial;
    var i;
    factorial := 1;
    for i := 1 to n step 1
        factorial := factorial * i
    end;
    return factorial
end

// Función 4: Suma factoriales en un rango (usa otra función)
function suma_factorial_rango(inicio, fin)
begin
    var i;
    var suma_total;
    var factorial_actual;
    suma_total := 0;
    for i := inicio to fin step 1
        factorial_actual := call calcular_factorial(i);
        suma_total := suma_total + factorial_actual
    end;
    return suma_total
end

// Función 5: Suma elementos de un vector pasado como parámetro
function sumar_elementos_vector(vec : array[], tamaño)
begin
    var i;
    var suma;
    suma := 0;
    for i := 0 to tamaño - 1 step 1
        suma := suma + vec[i]
    end;
    // Modifica variable global como efecto secundario
    resultado_global := suma;
    return suma
end

// Función 6: Función recursiva para calcular potencia
function potencia_recursiva(base, exponente)
begin
    var resultado_local;
    if exponente = 0 then
        resultado_local := 1
    else
        if exponente = 1 then
            resultado_local := base
        else
            resultado_local := base * call potencia_recursiva(base, exponente - 1)
        end
    end;
    return resultado_local
end

// Función 7: Función que demuestra ámbito de variables
function probar_ambito_variables(param1, param2)
begin
    var variable_local;
    var i;
    
    // Variable local con mismo nombre que global, pero diferente ámbito
    var contador_global; // Esta es local, no la global
    contador_global := 100; // Modifica la local, no la global
    
    variable_local := param1 + param2;
    
    // Acceso a la variable global real (se necesita declarar como global)
    for i := 0 to 2 step 1
        variable_local := variable_local + i
    end;
    
    return variable_local
end